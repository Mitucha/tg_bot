require('dotenv').config()
const sequelize = require('./db')
const { UserModel, AttestationModel, ResultModel } = require('./models')
const {Bot, InlineKeyboard} = require('grammy')

// –ò–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤

const attestationItems = [
    {title: '–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ò—é–Ω—è', data: 'qwerty', command: 'att1'},
    {title: '–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ê–≤–≥—É—Å—Ç–∞', data: 'qwerty', command: 'att2'}
]

function commandAtt(arr){
    let result = []
    for (let i = 0; i < arr.length; i++){
        result.push(
            {command: arr[i].command, description: arr[i].title}
        )
    }
    return result
}

const db = [
    {
      label: '–í –∫–∞–∫–∏–µ –±–ª—é–¥–∞ –≤—Ö–æ–¥–∏—Ç –±–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü?',
      data: [
        '–®–∞—É—Ä–º–∞ –º–∏–Ω–∏ –∏ –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è —à–∞—É—Ä–º–∞',
        '–®–∞—É—Ä–º–∞ —Ñ–∏—Ç–Ω–µ—Å –∏ –≥—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç',
        '–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç –∏ –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è —à–∞—É—Ä–º–∞',
        '–°–∞–ª–∞—Ç —Ü–µ–∑–∞—Ä—å –∏ –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∞—è —à–∞—É—Ä–º–∞'
      ],
      sucs: 2
    },
    {
      label: '–°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º?',
      data: [ '5', '7', '17', '3' ],
      sucs: 1
    },
    {
      label: '–ö–∞–∫–∞—è –æ—Å–Ω–æ–≤–∞ —É –∞–¥—ã–≥–µ–π—Å–∫–æ–π —à–∞—É—Ä–º—ã?',
      data: [
        '–ø—à–µ–Ω–∏—á–Ω–∞—è —Ç–æ—Ä—Ç–∏–ª—å—è',
        '–±–æ–ª—å—à–æ–π –ª–∞–≤–∞—à',
        '–º–∞–ª–µ–Ω—å–∫–∏–π –ª–∞–≤–∞—à',
        '—Å—ã—Ä–Ω–∞—è —Ç–æ—Ä—Ç–∏–ª—å—è'
      ],
      sucs: 4
    }
  ]
let leng = 0
let cookies = 0 // –•–∞—Ä–¥–∫–æ–¥–∏–º –ü–µ—á–µ–Ω—å–∫–∏ —Ç—É—Ç, —á—Ç–æ–±—ã, –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —Ç–µ—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
//==============================
const bot = new Bot(process.env.BOT_API_KEY) //–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É

//–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã

bot.api.setMyCommands(commandAtt(attestationItems))

/*bot.api.setMyCommands([
    {
        command: 'attestation',
        description: '–ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é'
    }
])*/

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ  –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function conectDB() {
    try{
        await sequelize.authenticate()
        await sequelize.sync()
    } catch (e) {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–æ–º–∞–ª–æ—Å—å', e)
    }
}
conectDB()

// –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
bot.command('start', async stx => {

    await stx.reply('–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é, –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è. –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç—ã –ø–æ–ª—É—á–∏—à—å ¬´–ø–µ—á–µ–Ω—å–∫—É¬ªüç™')
    await stx.reply("–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é")
})
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–µ–º –æ–Ω —è–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–µ
async function sequenceOfQuestions(ctx, num){
    
    const context = db[num]
    const inlineKeyboard = new InlineKeyboard()
    .text(context.data[0], isDone(1, context.sucs)).row()
    .text(context.data[1], isDone(2, context.sucs)).row()
    .text(context.data[2], isDone(3, context.sucs)).row()
    .text(context.data[3], isDone(4, context.sucs))
    await ctx.reply(context.label, {reply_markup: inlineKeyboard})
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
function isDone(number, doneNum){
    if(number === doneNum){
        return 'done'
    }
    return 'notDone'
}

// –í—ã–∑–æ–≤ —Ç–µ—Å—Ç–∞
bot.callbackQuery('button-1', async ctx => {
    sequenceOfQuestions(ctx, leng++)
    //const inlineKeyboard = new InlineKeyboard().text('14—Å–º', 'button-3').row().text('15—Å–º', 'button-4')
    //await ctx.reply('–ö–∞–∫–æ–π –¥–ª–∏–Ω—ã —É –≤–∞—Å —á–ª–µ–Ω? ', {reply_markup: inlineKeyboard})
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.callbackQuery(['notDone'], async ctx => {
    if(leng == db.length){
        try{
            //const User = await UserModel.findOne({where: {telegramm_id: ctx.from.id}})
            //User.cookies = cookies
            //await User.save()
            //await ctx.reply(`–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª ${User.cookies}üç™`)
            leng = 0
            await ctx.reply(`–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª ${cookies}üç™`)
            cookies = 0
        } catch(e){console.error(e)}
        
    }else{sequenceOfQuestions(ctx, leng++)}
    
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.callbackQuery('done', async ctx => {
    cookies++
    if(leng == db.length){
        //const User = await UserModel.findOne({where: {telegramm_id: ctx.from.id}})
        //User.cookies = cookies
        //await User.save()
        //await ctx.reply(`–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª ${User.cookies}üç™`)
        leng = 0
        await ctx.reply(`–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª ${cookies}üç™`)
        cookies = 0
    } else{sequenceOfQuestions(ctx, leng++)}
})

bot.callbackQuery('button-2', async ctx => {
    sequenceOfQuestions(ctx, leng++)
})

bot.callbackQuery('add_attestation', async ctx => {
    ctx.reply('–Ø –∂–¥—É —Å–ø–∏—Å–æ–∫')
})
//==============================================================

bot.command('attestation', async (ctx) => {
    const inlineKeyboard = new InlineKeyboard().text('–ö–∞—Å—Å–∏—Ä', 'button-1').text('–ü–æ–≤–∞—Ä', 'button-2')
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é ', {reply_markup: inlineKeyboard})
})

bot.on("message", async (ctx) => {
    // –ï—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö?
    const registredUser = await UserModel.findOne({
        where: {
            telegramm_id: JSON.stringify(ctx.message.from.id)
        }
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if(ctx.from.id === 556854769 || ctx.from.id === 366486108) {
        await ctx.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        const inlineKeyboard = new InlineKeyboard().text('–î–æ–±–∞–≤–∏—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é', 'add_attestation').row().text('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        await ctx.reply('–ö–∞–∫–∏–µ –±—É–¥—É—Ç –¥–µ–π—Å—Ç–≤–∏—è?', {reply_markup: inlineKeyboard})
        return
    }

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π –∏–ª–∏ —Å—Ç–∞—Ä—ã–π. –ê–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π
    if(registredUser === null) {
        await UserModel.create({
            chatId: JSON.stringify(ctx.message.chat.id),
            name: ctx.message.text,
            telegramm_id: JSON.stringify(ctx.message.from.id),
            compliteAtt: 0,
            cookies: 0
        })

        await ctx.reply(`–í–æ—Ç –º—ã –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å, ${ctx.message.text}`)

    } else{
        //await ctx.reply(`–ú—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã, ${registredUser.name}. –£ —Ç–µ–±—è ${cookies} üç™.`)
        
        await ctx.reply(registredUser)
    }
    
    
  });

bot.start()